type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram server = new TestedProgram("server");
            server.startInBackground();
            Thread.sleep(500);

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram("client");

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/server/data/JsonRepositoryArray.java
  visible: true
  text: |+
    package server.data;
    import java.util.Arrays;

    public class JsonRepositoryArray implements JsonRepository {
        private final String[] dataSource;
        private final int size;

        public JsonRepositoryArray(int size) {
            this.size = size;
            dataSource = new String[size];
            Arrays.fill(dataSource, "");
        }

        @Override
        public String get(int index) {
            if (isValidIndex(index) && !dataSource[index - 1].isEmpty()) {
                return dataSource[index - 1];
            }
            return null;
        }

        @Override
        public boolean set(int index, String value) {
            if (isValidIndex(index)) {
                dataSource[index - 1] = value;
                return true;
            }
            return false;
        }

        @Override
        public boolean delete(int index) {
            return set(index, "");
        }

        public boolean isValidIndex(int index) {
            return index >= 1 && index <= size;
        }

    }

  learner_created: true
- name: src/server/api/CommandController.java
  visible: true
  text: |
    package server.api;

    import server.data.JsonRepository;

    import java.util.Objects;
    import java.util.Scanner;

    public class CommandController {
        private final JsonRepository jsonRepository;
        private String operation;
        private int index;
        private String value;

        public CommandController(JsonRepository jsonRepository) {
            this.jsonRepository = jsonRepository;
        }

        public void startListener() {
            do {
                getOperation();
                switch (operation) {
                    case "get":
                        String result = jsonRepository.get(index);
                        System.out.println(Objects.requireNonNullElse(result, "ERROR"));
                        break;
                    case "set":
                        System.out.println(jsonRepository.set(index, value) ? "OK" : "ERROR");
                        break;
                    case "delete":
                        System.out.println(jsonRepository.delete(index) ? "OK" : "ERROR");
                        break;
                    default:
                        System.out.println("ERROR");
                        break;
                }
            } while (!"exit".equals(operation));
        }

        public void getOperation() {
            Scanner scanner = new Scanner(System.in);
            String str = scanner.nextLine();
            String[] parts = str.split(" ", 3);
            operation = parts.length > 0 ? parts[0] : "";
            index = parts.length > 1 ? Integer.parseInt(parts[1]) : 0;
            value = parts.length > 2 ? parts[2] : "";
        }
    }
  learner_created: true
- name: src/server/data/JsonRepository.java
  visible: true
  text: |+
    package server.data;

    public interface JsonRepository {
        String get(int index);
        boolean set(int index, String value);
        boolean delete(int index);
    }

  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/349/implement#comment
status: Failed
record: -1
